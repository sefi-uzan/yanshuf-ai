// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  image         String
  email         String    @unique
  emailVerified DateTime?

  accounts   Account[]
  sessions   Session[]
  assistants Assistant[]
  threads    Thread[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Assistant {
  id           String  @id
  name         String
  description  String?
  instructions String? @db.Text

  file   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String? @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  threads Thread[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fileId])
  @@index([userId])
}

model File {
  id   String @id
  name String
  url  String
  size Int

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Assistant Assistant?
}

model Thread {
  id String @id
  runId String @unique
  name String

  Message Message[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  assistant Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assistantId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([assistantId])
}

enum Role {
  assistant
  user
}
model Message {
  id String @id
  role Role
  content String @db.Text

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  file File? @relation(fields: [fileId], references: [id])
  fileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([threadId])
  @@index([fileId])
}
